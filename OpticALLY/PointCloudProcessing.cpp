//
//  PointCloudProcessing.cpp
//  OpticALLY
//
//  Created by John Seong on 5/7/24.
//

#include "PointCloudProcessing.hpp"
#include "ImageDepth.hpp"
#include <open3d/Open3D.h>
#include <vector>
#include <memory>
#include <tuple>
#include <vector>
#include <iostream>
#include <fstream>

void processPointCloudsToObj(const std::string& calibrationFile, const std::vector<std::string>& imageFiles, const std::vector<std::string>& depthFiles, const std::string& outputPath) {
    if (imageFiles.empty() || depthFiles.empty()) {
        throw std::runtime_error("No image or depth files found");
    }

    std::vector<std::shared_ptr<open3d::geometry::PointCloud>> pointClouds;

    for (size_t i = 0; i < imageFiles.size(); ++i) {
        auto imageDepth = std::make_shared<ImageDepth>(calibrationFile, imageFiles[i], depthFiles[i], 640, 480, 0.1, 0.5, 0.01);
        pointClouds.push_back(imageDepth->getPointCloud());
    }

    auto globalPCD = pointClouds[0];  // Assuming only the first point cloud is processed

    std::cout << "Meshing ..." << std::endl;
    auto [mesh, densities] = open3d::geometry::TriangleMesh::CreateFromPointCloudPoisson(*globalPCD, 9);

    const double threshold = 0.004893;
    std::cout << "Remove artifacts and large triangles generated by screened Poisson" << std::endl;

    std::vector<Eigen::Vector3d> vertices = mesh->vertices_;
    std::vector<Eigen::Vector3i> triangles = mesh->triangles_;
    std::vector<bool> trianglesToRemove(mesh->triangles_.size(), false);

    for (size_t i = 0; i < triangles.size(); ++i) {
        auto& tri = triangles[i];
        double edgeLengths[3] = {
            (vertices[tri[0]] - vertices[tri[1]]).norm(),
            (vertices[tri[1]] - vertices[tri[2]]).norm(),
            (vertices[tri[2]] - vertices[tri[0]]).norm()
        };
        if (edgeLengths[0] > threshold || edgeLengths[1] > threshold || edgeLengths[2] > threshold) {
            trianglesToRemove[i] = true;
        }
    }

    mesh->RemoveTrianglesByMask(trianglesToRemove);
    mesh->RemoveUnreferencedVertices();
    mesh->RemoveNonManifoldEdges();

    fs::path outputFilePath = fs::path(outputPath) / "output.obj";
    open3d::io::WriteTriangleMesh(outputFilePath.string(), *mesh);
}
